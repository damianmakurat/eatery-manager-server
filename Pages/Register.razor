@page "/Register"
@layout eatery_manager_server.Shared.LoginLayout
@using eatery_manager_server.Data.Models
@using BCrypt.Net
@using eatery_manager_server.Data.Services
@inject eatery_manager_server.Data.Services.LoginService LoginService

<h3 class="form-title">Rejestracja</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert-error">@errorMessage</div>
}

<EditForm Model="@newUser" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Login:</label>
        <InputText @bind-Value="newUser.Username" class="form-control" placeholder="Podaj login" />
    </div>
    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="newUser.Email" type="email" class="form-control" placeholder="Podaj email" />
    </div>
    <div class="form-group">
        <label>Hasło:</label>
        <InputText @bind-Value="newUser.Password" type="password" class="form-control" placeholder="Podaj hasło" />
    </div>

    <button type="submit" class="btn-primary">Zarejestruj</button>
</EditForm>

<p class="mt-3">
    Masz już konto? <NavLink href="/login" class="btn-secondary">Zaloguj się</NavLink>
</p>

@code {
    private eatery_manager_server.Data.Models.Login newUser = new();
    private string successMessage = "";
    private string errorMessage = "";

    private async Task RegisterUser()
    {
        try
        {
            newUser.Role = "User";

            await LoginService.RegisterAsync(newUser);

            successMessage = "Rejestracja zakończona sukcesem!";
            errorMessage = "";
            newUser = new eatery_manager_server.Data.Models.Login();
        }
        catch (Exception ex)
        {
            errorMessage = "Błąd podczas rejestracji: " + ex.Message;
            successMessage = "";
        }
    }
}
